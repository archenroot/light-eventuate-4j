<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting-starteds on Light Eventuate 4J - An event sourcing and CQRS framework with Kafka</title>
    <link>https://networknt.github.io/light-eventuate-4j/getting-started/</link>
    <description>Recent content in Getting-starteds on Light Eventuate 4J - An event sourcing and CQRS framework with Kafka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Thu, 27 Apr 2017 09:35:07 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-eventuate-4j/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>https://networknt.github.io/light-eventuate-4j/getting-started/</link>
      <pubDate>Thu, 27 Apr 2017 09:35:07 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/getting-started/</guid>
      <description>Introduction One of the major issues that we have seen occur in a system with microservices is the way transactions work when they span over different services. Within our old monolithic architecture, we have been using distributed transactions to resolve this, but they come with their own issues. Especially deadlocks have been a pain and scalability is a big headache.
Distributed transaction management is a key architectural consideration that needs to be addressed whenever you are proposing a microservices deployment model to a customer.</description>
    </item>
    
  </channel>
</rss>