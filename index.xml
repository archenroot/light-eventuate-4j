<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light Eventuate 4J - An event sourcing and CQRS framework with Kafka</title>
    <link>https://networknt.github.io/light-eventuate-4j/</link>
    <description>Recent content on Light Eventuate 4J - An event sourcing and CQRS framework with Kafka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Tue, 30 May 2017 12:12:44 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-eventuate-4j/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>index</title>
      <link>https://networknt.github.io/light-eventuate-4j/introduction/</link>
      <pubDate>Tue, 30 May 2017 12:12:44 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/introduction/</guid>
      <description>This is the introduction.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://networknt.github.io/light-eventuate-4j/roadmap/</link>
      <pubDate>Thu, 27 Apr 2017 09:38:52 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/roadmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/</link>
      <pubDate>Thu, 27 Apr 2017 09:38:08 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/</guid>
      <description>The following tutorials will help users to get started and more will be added later.
 How to build, setting local and docker environment for light-eventuate-4j framework
 How to do unit test
 How to do end-to-end test
 How to do integration test
  </description>
    </item>
    
    <item>
      <title>Example</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/</link>
      <pubDate>Thu, 27 Apr 2017 09:37:50 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/</guid>
      <description>The following examples can be found in light-example-4j repository.
 TODO List - Todo list example  </description>
    </item>
    
    <item>
      <title>Desgin</title>
      <link>https://networknt.github.io/light-eventuate-4j/design/</link>
      <pubDate>Thu, 27 Apr 2017 09:37:10 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/design/</guid>
      <description>#Light-eventuate conceptual model
Entity
An entity is a business object such as an Order. An entity is an instance of an EntityType. In Domain-Driven Design terms, an entity is an aggregate. Each entity has an ID, unique among instances of the same entity type, which you can choose or allow Eventuate to assign to you. An entity has a sequence of one or more events. You can perform the following operations on an entity • Create - Create a new instance of the specified entity type with an initial sequence of events.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://networknt.github.io/light-eventuate-4j/architecture/</link>
      <pubDate>Thu, 27 Apr 2017 09:35:23 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/architecture/</guid>
      <description>Event-driven architecture An Eventuate application consists of four types of modules, each with different roles and responsibilities:
 Command-side module Query-side view updater module Query-side view query module module Outbound gateway module  Note that this is the logical architecture of the application. The modules can either be deployed together as a monolithic application or separately as standalone microservices.
Command-side modules
The command-side of an Eventuate application consists of one or more command-side modules.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://networknt.github.io/light-eventuate-4j/getting-started/</link>
      <pubDate>Thu, 27 Apr 2017 09:35:07 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/getting-started/</guid>
      <description>Light Eventuate 4J Framework Distributed data management problems in a microservice architecture: In microservice system, normally each service has its own database. Some business transactions, however, span multiple services so you need a mechanism to ensure data consistency across services. For example, let’s imagine that you are building an e-commerce store where customers have a credit limit. The application must ensure that a new order will not exceed the customer’s credit limit.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://networknt.github.io/light-eventuate-4j/</link>
      <pubDate>Wed, 26 Apr 2017 22:57:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/</guid>
      <description>This is the index page and it should be shown as the first page.</description>
    </item>
    
    <item>
      <title>TodoList</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/todo/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/todo/</guid>
      <description>Introduction This example can be found at https://github.com/networknt/light-eventuate-example/todo
The TodoList application is the entry point POC example application for the Light Eventuate. It illustrates how you can use the platform to write an application with a microservices architecture that uses Event Sourcing and Command Query Responsibility Segregation (CQRS). The TodoList application lets users maintain a todolist.
The TodoList application is a Java application built on Light-Java platform by using Event Sourcing based programming model.</description>
    </item>
    
    <item>
      <title>End to End Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/end-to-end-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:21:40 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/end-to-end-test/</guid>
      <description>End to End Test Run the e2etest module in the example project toto-list
get light-eventuate-example project:
Git clone https://github.com/networknt/light-eventuate-example.git
cd /light-eventuate-example/todo-list/e2etest/
run test class: com.networknt.eventuate.todolist.TodoTest</description>
    </item>
    
    <item>
      <title>Integration Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/integration-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:06:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/integration-test/</guid>
      <description> Integration Test </description>
    </item>
    
    <item>
      <title>Unit Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/unit-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:05:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/unit-test/</guid>
      <description>Junit test Run the junit test test cases in the each component modules to unit test.
Unit test Run EventuateEmbeddedTestAggregateStoreTest test case in testjdbc module to unit test the event process</description>
    </item>
    
    <item>
      <title>Microservices</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/setup/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/setup/</guid>
      <description>Introduction Microservices enable businesses to innovate faster and stay ahead of the competition. But one major challenge with the microservices architecture is the management of distributed data. Each microservice has its own private database. It is difficult to implement business transactions that maintain data consistency across multiple services as well as queries that retrieve data from multiple services.
The light event sourcing framework provides a simple yet powerful event-driven programming model that solves the distributed data management problems inherent in a microservice architecture.</description>
    </item>
    
  </channel>
</rss>