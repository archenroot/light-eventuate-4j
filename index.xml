<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light Eventuate 4J - An event sourcing and CQRS framework with Kafka</title>
    <link>https://networknt.github.io/light-eventuate-4j/</link>
    <description>Recent content on Light Eventuate 4J - An event sourcing and CQRS framework with Kafka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 30 Jul 2017 10:45:03 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-eventuate-4j/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Todo list tutorial</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/todo-list/</link>
      <pubDate>Sun, 30 Jul 2017 10:45:03 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/todo-list/</guid>
      <description>This is the most simple Hello World type of application with event sourcing and CQRS on top of light-eventuate-4j. It has command side service that add new todo item, update existing todo item and remove todo item(s). It also has query side service to retrieve all the todo items for display in the web single page application.
The following steps will assume you know the basic about light-eventuate-4j as well as light-rest-4j and light-hybrid-4j as we are going to build services in RESTful style and Hybrid style.</description>
    </item>
    
    <item>
      <title>Workspace setup for developing light-eventuate-4j services</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/service-dev/</link>
      <pubDate>Sat, 29 Jul 2017 22:02:00 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/service-dev/</guid>
      <description>Introduction Microservices enable businesses to innovate faster and stay ahead of the competitions. But one major challenge with the microservices architecture is the management of distributed data. Each microservice has its own private database. It is difficult to implement business transactions that maintain data consistency across multiple services as well as queries that retrieve data from multiple services.
The light-eventuate-4j is an event sourcing and CQRS framework provides a simple yet powerful event-driven programming model that solves the distributed data management problems inherent in a microservice architecture.</description>
    </item>
    
    <item>
      <title>Workspace setup for developing light-eventuate-4j component</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/eventuate-dev/</link>
      <pubDate>Sat, 29 Jul 2017 22:01:45 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/eventuate-dev/</guid>
      <description>Introduction Microservices enable businesses to innovate faster and stay ahead of the competitions. But one major challenge with the microservices architecture is the management of distributed data. Each microservice has its own private database. It is difficult to implement business transactions that maintain data consistency across multiple services as well as queries that retrieve data from multiple services.
The light-eventuate-4j is an event sourcing and CQRS framework provides a simple yet powerful event-driven programming model that solves the distributed data management problems inherent in a microservice architecture.</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://networknt.github.io/light-eventuate-4j/component/</link>
      <pubDate>Sat, 29 Jul 2017 18:51:48 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/component/</guid>
      <description>There are too many components in light-eventuate-4j and they can be categorized to four groups.
Data change capture cdc-common This module contains some common classes and configuration for data change capture.
cdc-mysql This module contains Mysql related classes for data change capture. It is based on Mysql binlog connector for Java
cdc-server This is a microservice implemented on top of light-rest-4j framework. It constantly monitors Mysql binlog and pushes EVENTS table changes to Kafka topic.</description>
    </item>
    
    <item>
      <title>Account Money Transfer Introduction</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/transfer_introduction/</link>
      <pubDate>Fri, 30 Jun 2017 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/transfer_introduction/</guid>
      <description>Introduction This example can be found at https://github.com/networknt/light-eventuate-example/account-management
Account Money Transfer example is build on light-4j, light-rest-4j and light-eventuate-4j which uses event sourcing and CQRS as major patterns to handle event process in multiple microservices.
The application consists of loosely coupled components that communicate using events and leverages eventual consistency, event-driven approach rather than using tranditional distributed transaction.
These components can be deployed either as separate services or packaged as a monolithic application for simplified development and testing.</description>
    </item>
    
    <item>
      <title>How to handle duplicated events in Kafka</title>
      <link>https://networknt.github.io/light-eventuate-4j/design/dup-events/</link>
      <pubDate>Mon, 19 Jun 2017 08:18:08 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/design/dup-events/</guid>
      <description> As we are using Kafka as our messaging broker for event sourcing and Kafka guarantees messages are delivered to consumers at least once. that means we will have duplicated events that have to be handled gracefully.
There are several ways to handle duplicate messages.
Idempotency Vector clock </description>
    </item>
    
    <item>
      <title>Why not use kafka as eventstore</title>
      <link>https://networknt.github.io/light-eventuate-4j/architecture/kafka-eventstore/</link>
      <pubDate>Mon, 19 Jun 2017 08:14:44 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/architecture/kafka-eventstore/</guid>
      <description>When using Kafka as pipeline for event sourcing, people will ask why not use Kafka as event store. It can persist events and keep it for as long as it requires.
There are several drawbacks in doing so.
 Kafka only guarantees at least once deliver and there are duplicates in the event store that cannot be removed.
 Due to immutability, there is no way to manipulate event store when application evolves and events need to be transformed.</description>
    </item>
    
    <item>
      <title>cqrs</title>
      <link>https://networknt.github.io/light-eventuate-4j/architecture/cqrs/</link>
      <pubDate>Fri, 09 Jun 2017 20:22:10 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/architecture/cqrs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Event Sourcing</title>
      <link>https://networknt.github.io/light-eventuate-4j/architecture/event-sourcing/</link>
      <pubDate>Fri, 09 Jun 2017 18:20:57 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/architecture/event-sourcing/</guid>
      <description>Event sourcing is an event-centric approach to persistence; A service that uses event sourcing persists each aggregate as a sequence of events. When it creates or updates an aggregate, the service saves one or more events in the database, which is also known as the event store. It reconstructs the current state of an aggregate by loading the events and replaying them. In functional programming terms, a service reconstructs the state of an aggregate by performing a functional fold/reduce over the events.</description>
    </item>
    
    <item>
      <title>Event Driven Architecture</title>
      <link>https://networknt.github.io/light-eventuate-4j/architecture/event-driven/</link>
      <pubDate>Fri, 09 Jun 2017 16:32:37 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/architecture/event-driven/</guid>
      <description>Event-driven architecture An Eventuate application consists of four types of modules, each with different roles and responsibilities:
 Command-side module Query-side view updater module Query-side view query module module Outbound gateway module  Note that this is the logical architecture of the application. The modules can either be deployed together as a monolithic application or separately as standalone microservices.
Command-side modules
The command-side of an Eventuate application consists of one or more command-side modules.</description>
    </item>
    
    <item>
      <title>Communication Patterns</title>
      <link>https://networknt.github.io/light-eventuate-4j/architecture/comm-pattern/</link>
      <pubDate>Fri, 09 Jun 2017 14:39:01 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/architecture/comm-pattern/</guid>
      <description>Introduction In a monolithic application, components invoke one another via method or function calls. In contrast, a microservices-based application might be distributed on multiple Docker containers or VMs or multiple machines. Each service instance is typically a process and services much interact using an inter-process communication mechanism.
Patterns There are two major styles in client/service communication.
Synchronous The client expects a timely response from the service and might even block while it waits.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://networknt.github.io/light-eventuate-4j/roadmap/</link>
      <pubDate>Thu, 27 Apr 2017 09:38:52 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/roadmap/</guid>
      <description>light-eventuate tasks TODO list: enrich the eventuate-cdccore package by adding Kafka stream API to handle events in stream chain; implement Stream as Table.
enrich eventuate-jdbc to handle different database.
add more junit cases for the project.
create an admin console for project to monitor the event process and the event sync between different service.
create example project top of Light 4J and Light Eventuate 4J.</description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/</link>
      <pubDate>Thu, 27 Apr 2017 09:38:08 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/</guid>
      <description>The following tutorials will help users to get started and more will be added later.
 How to setup workspace for light-eventuate-4j development
 How to start light-eventuate-4j for serivce development
 How to do unit test
 How to do end-to-end test
 How to do integration test
 Todo List Application
  </description>
    </item>
    
    <item>
      <title>Example</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/</link>
      <pubDate>Thu, 27 Apr 2017 09:37:50 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/</guid>
      <description>The following examples can be found in light-example-4j repository.
 TODO List - Todo list example
 Account Money Transfer - Account Money Transfer example
  </description>
    </item>
    
    <item>
      <title>Desgin</title>
      <link>https://networknt.github.io/light-eventuate-4j/design/</link>
      <pubDate>Thu, 27 Apr 2017 09:37:10 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/design/</guid>
      <description>#Light-eventuate conceptual model
Entity
An entity is a business object such as an Order. An entity is an instance of an EntityType. In Domain-Driven Design terms, an entity is an aggregate. Each entity has an ID, unique among instances of the same entity type, which you can choose or allow Eventuate to assign to you. An entity has a sequence of one or more events. You can perform the following operations on an entity • Create - Create a new instance of the specified entity type with an initial sequence of events.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://networknt.github.io/light-eventuate-4j/architecture/</link>
      <pubDate>Thu, 27 Apr 2017 09:35:23 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/architecture/</guid>
      <description>Here is a list of architecure decisions for light-eventuate-4j:
 Communication Patterns
 Event Driven
 Event Sourcing
 CQRS
 Why not use Kafka as source of truth
  </description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://networknt.github.io/light-eventuate-4j/getting-started/</link>
      <pubDate>Thu, 27 Apr 2017 09:35:07 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/getting-started/</guid>
      <description>Introduction One of the major issues that we have seen occur in a system with microservices is the way transactions work when they span over different services. Within our old monolithic architecture, we have been using distributed transactions to resolve this, but they come with their own issues. It is very hard to avoid deadlocks and scale the application when business grows.
Distributed transaction management is a key architectural consideration that needs to be addressed whenever you are proposing a microservices deployment model to a customer.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://networknt.github.io/light-eventuate-4j/</link>
      <pubDate>Wed, 26 Apr 2017 22:57:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/</guid>
      <description>When building microservices, there are two major patterns are used for service to service communication.
Synchronous, Request/Response Communication In light-4j, this means to use Client module to call other services in the request/response fashion regardless light-rest-4j, light-graphql-4j or light-hybrid-4j is used.
Asynchronous, Message-Based Communication The eventual consistency framework light-eventuate-4j is designed to facilitate asynchronous communication between services built on top of light-rest-4j, light-grahpql-4j and light-hybrid-4j.
Service communication is through events and every service maintain its own aggregates to serve consumer independently.</description>
    </item>
    
    <item>
      <title>Account Money Transfer</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/transfer_integration/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/transfer_integration/</guid>
      <description>Integration Test Setting Build related projects: Checkout light-eventuate-4j framework projects.
cd ~/networknt
git clone git@github.com:networknt/light-eventuate-4j.git
Prepare workspace Go into the projects folder above, and build the project with maven
mvn clean install
Build Account-management example Get the example project from github: git clone git@github.com:networknt/light-eventuate-example.git
cd ~/networknt/light-eventuate-example/account-management
mvn clean install
Run the Event store and Mocroservices: Test and verify result: From command line: Create new customer (C1):  On customer command side, system sent the cCreateCustomerCommand and apply CustomerCreatedEvent event.</description>
    </item>
    
    <item>
      <title>Account Money Transfer Example</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/transfer/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/transfer/</guid>
      <description> Account Money transfer Introduction - Account Money Transfer example introduction
 Account Money Transfer Integration Test - Account Money Transfer example integration test
  </description>
    </item>
    
    <item>
      <title>TodoList</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/todo/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/todo/</guid>
      <description> TODO List Introduction - Todo list example introduction
 TODO List Integration Test - Todo list example integration test
  </description>
    </item>
    
    <item>
      <title>TodoList</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/todo_integration/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/todo_integration/</guid>
      <description>Integration Test Following the steps on tutorial to start event store and CDC service:
Event Store docker compose: Docker can simplify the application delivery. For light event sourcing system, to start event store by from docker:
&amp;ndash; From light-eventuate-4j project root folder: /light-eventuate-4j
&amp;ndash; run docker-compose up
system will start ALL required event store components (mysql, zookeeper, kafka)
Prepare query side DB script: (DB script saved at: /light-eventuate-example/mysql; root user for mysql: root/rootpassword)</description>
    </item>
    
    <item>
      <title>TodoList Introduction</title>
      <link>https://networknt.github.io/light-eventuate-4j/example/todo_introduction/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/example/todo_introduction/</guid>
      <description>Introduction This example can be found at https://github.com/networknt/light-eventuate-example/todo
The TodoList application is the entry point POC example application for the Light Eventuate. It illustrates how you can use the platform to write an application with a microservices architecture that uses Event Sourcing and Command Query Responsibility Segregation (CQRS). The TodoList application lets users maintain a todolist.
The TodoList application is a Java application built on Light-Java platform by using Event Sourcing based programming model.</description>
    </item>
    
    <item>
      <title>Docker Images for Event Store</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/docker/</link>
      <pubDate>Wed, 12 Oct 2016 17:21:40 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/docker/</guid>
      <description>Event Store docker images Light-eventuate-4j include event store docker files for local environment:
/light=eventuate-4j/docker/dockerimages
 --- kafka --- zookeeper --- mysql  build docker images Kafka:
go to /light=eventuate-4j/docker/dockerimages/kafka
run command:
&amp;ndash; ./build.sh
Zookeeper:
go to /light=eventuate-4j/docker/dockerimages/zookeeper
run command:
&amp;ndash; ./build.sh
Mysql:
go to /light=eventuate-4j/docker/dockerimages/mysql
run command:
&amp;ndash; ./build.sh
tag and publish docker images The notation for associating a local image with a repository on a registry is username/repository:tag. The tag is optional, but recommended, since it is the mechanism that registries use to give Docker images a version.</description>
    </item>
    
    <item>
      <title>End to End Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/end-to-end-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:21:40 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/end-to-end-test/</guid>
      <description>End to End Test Run the e2etest module in the example project toto-list
get light-eventuate-example project:
Git clone https://github.com/networknt/light-eventuate-example.git
cd /light-eventuate-example/todo-list/e2etest/
run test class: com.networknt.eventuate.todolist.TodoTest</description>
    </item>
    
    <item>
      <title>Integration Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/integration-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:06:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/integration-test/</guid>
      <description>Integration Test  Following the steps on &amp;ldquo;How to build, setting local and docker environment for light-eventuate-4j framework&amp;rdquo;:  To start event store, cdc service, and command/query side service
 Send request from command side the publish events:  From postmand, send post request:
URL: http://localhost:8083/v1/todos;
Headers:[{&amp;ldquo;key&amp;rdquo;:&amp;ldquo;Content-Type&amp;rdquo;,&amp;ldquo;value&amp;rdquo;:&amp;ldquo;application/json&amp;rdquo;,&amp;ldquo;description&amp;rdquo;:&amp;ldquo;&amp;rdquo;}];
Body: {&amp;ldquo;title&amp;rdquo;:&amp;rdquo; this is the test todo from postman1&amp;rdquo;,&amp;ldquo;completed&amp;rdquo;:false,&amp;ldquo;order&amp;rdquo;:0};
Response: { &amp;ldquo;done&amp;rdquo;: true, &amp;ldquo;cancelled&amp;rdquo;: false, &amp;ldquo;completedExceptionally&amp;rdquo;: false, &amp;ldquo;numberOfDependents&amp;rdquo;: 0 };
This request will send request which will call backe-end service to generate a &amp;ldquo;create todo&amp;rdquo; event and publish to event store.</description>
    </item>
    
    <item>
      <title>Unit Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/unit-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:05:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/unit-test/</guid>
      <description>Junit test Run the junit test test cases in the each component modules to unit test.
Unit test Run EventuateEmbeddedTestAggregateStoreTest test case in testjdbc module to unit test the event process</description>
    </item>
    
  </channel>
</rss>