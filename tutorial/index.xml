<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Light Eventuate 4J - An event sourcing and CQRS framework with Kafka</title>
    <link>https://networknt.github.io/light-eventuate-4j/tutorial/</link>
    <description>Recent content in Tutorials on Light Eventuate 4J - An event sourcing and CQRS framework with Kafka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 02 Aug 2017 09:19:29 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-eventuate-4j/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debugging Kafka</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/kafka/</link>
      <pubDate>Wed, 02 Aug 2017 09:19:29 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/kafka/</guid>
      <description>As we are using Kafka as message broker, we need to make sure we can debug and monitor Kafka cluster during runtime. There are standard tools provided by Kafka to check the topics and check the messages in each topic. These scripts are in bin directory from Kafka installation directory. You can find a lot of online material on how to use these scripts.
When we dockerize Kafka and run Kafka in a docker compose with zookeeper, things will be a little different.</description>
    </item>
    
    <item>
      <title>Todo list tutorial</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/todo-list/</link>
      <pubDate>Sun, 30 Jul 2017 10:45:03 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/todo-list/</guid>
      <description>This is the most simple Hello World type of application with event sourcing and CQRS on top of light-eventuate-4j. It has command side service that add new todo item, update existing todo item and remove todo item(s). It also has query side service to retrieve all the todo items for display in the web single page application.
The following steps will assume you know the basic about light-eventuate-4j as well as light-rest-4j and light-hybrid-4j as we are going to build services in RESTful style and Hybrid style.</description>
    </item>
    
    <item>
      <title>Workspace setup for developing light-eventuate-4j services</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/service-dev/</link>
      <pubDate>Sat, 29 Jul 2017 22:02:00 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/service-dev/</guid>
      <description>Introduction Microservices enable businesses to innovate faster and stay ahead of the competitions. But one major challenge with the microservices architecture is the management of distributed data. Each microservice has its own private database. It is difficult to implement business transactions that maintain data consistency across multiple services as well as queries that retrieve data from multiple services.
The light-eventuate-4j is an event sourcing and CQRS framework provides a simple yet powerful event-driven programming model that solves the distributed data management problems inherent in a microservice architecture.</description>
    </item>
    
    <item>
      <title>Workspace setup for developing light-eventuate-4j component</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/eventuate-dev/</link>
      <pubDate>Sat, 29 Jul 2017 22:01:45 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/eventuate-dev/</guid>
      <description>Introduction Microservices enable businesses to innovate faster and stay ahead of the competitions. But one major challenge with the microservices architecture is the management of distributed data. Each microservice has its own private database. It is difficult to implement business transactions that maintain data consistency across multiple services as well as queries that retrieve data from multiple services.
The light-eventuate-4j is an event sourcing and CQRS framework provides a simple yet powerful event-driven programming model that solves the distributed data management problems inherent in a microservice architecture.</description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/</link>
      <pubDate>Thu, 27 Apr 2017 09:38:08 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/</guid>
      <description>The following tutorials will help users to get started and more will be added later.
 How to setup workspace for light-eventuate-4j development
 How to start light-eventuate-4j for serivce development
 How to do unit test
 How to do end-to-end test
 How to do integration test
 Todo List Application
 How to debug Kafka
  </description>
    </item>
    
    <item>
      <title>Docker Images for Event Store</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/docker/</link>
      <pubDate>Wed, 12 Oct 2016 17:21:40 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/docker/</guid>
      <description>Event Store docker images Light-eventuate-4j include event store docker files for local environment:
/light=eventuate-4j/docker/dockerimages
 --- kafka --- zookeeper --- mysql  build docker images Kafka:
go to /light=eventuate-4j/docker/dockerimages/kafka
run command:
&amp;ndash; ./build.sh
Zookeeper:
go to /light=eventuate-4j/docker/dockerimages/zookeeper
run command:
&amp;ndash; ./build.sh
Mysql:
go to /light=eventuate-4j/docker/dockerimages/mysql
run command:
&amp;ndash; ./build.sh
tag and publish docker images The notation for associating a local image with a repository on a registry is username/repository:tag. The tag is optional, but recommended, since it is the mechanism that registries use to give Docker images a version.</description>
    </item>
    
    <item>
      <title>End to End Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/end-to-end-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:21:40 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/end-to-end-test/</guid>
      <description>End to End Test Run the e2etest module in the example project toto-list
get light-eventuate-example project:
Git clone https://github.com/networknt/light-eventuate-example.git
cd /light-eventuate-example/todo-list/e2etest/
run test class: com.networknt.eventuate.todolist.TodoTest</description>
    </item>
    
    <item>
      <title>Integration Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/integration-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:06:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/integration-test/</guid>
      <description>Integration Test  Following the steps on &amp;ldquo;How to build, setting local and docker environment for light-eventuate-4j framework&amp;rdquo;:  To start event store, cdc service, and command/query side service
 Send request from command side the publish events:  From postmand, send post request:
URL: http://localhost:8083/v1/todos;
Headers:[{&amp;ldquo;key&amp;rdquo;:&amp;ldquo;Content-Type&amp;rdquo;,&amp;ldquo;value&amp;rdquo;:&amp;ldquo;application/json&amp;rdquo;,&amp;ldquo;description&amp;rdquo;:&amp;ldquo;&amp;rdquo;}];
Body: {&amp;ldquo;title&amp;rdquo;:&amp;rdquo; this is the test todo from postman1&amp;rdquo;,&amp;ldquo;completed&amp;rdquo;:false,&amp;ldquo;order&amp;rdquo;:0};
Response: { &amp;ldquo;done&amp;rdquo;: true, &amp;ldquo;cancelled&amp;rdquo;: false, &amp;ldquo;completedExceptionally&amp;rdquo;: false, &amp;ldquo;numberOfDependents&amp;rdquo;: 0 };
This request will send request which will call backe-end service to generate a &amp;ldquo;create todo&amp;rdquo; event and publish to event store.</description>
    </item>
    
    <item>
      <title>Unit Test</title>
      <link>https://networknt.github.io/light-eventuate-4j/tutorial/unit-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:05:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-eventuate-4j/tutorial/unit-test/</guid>
      <description>Junit test Run the junit test test cases in the each component modules to unit test.
Unit test Run EventuateEmbeddedTestAggregateStoreTest test case in testjdbc module to unit test the event process</description>
    </item>
    
  </channel>
</rss>